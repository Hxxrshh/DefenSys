import React, { useState } from 'react';
import './VulnerabilityExplainer.css';

const VulnerabilityExplainer = ({ vulnerabilities = [] }) => {
  const [expandedVuln, setExpandedVuln] = useState(null);

  // Get simplified explanation based on vulnerability type
  const getExplanation = (vulnerability) => {
    const title = vulnerability.title?.toLowerCase() || '';
    const description = vulnerability.description?.toLowerCase() || '';
    const severity = vulnerability.severity || 'Medium';

    // Common vulnerability patterns with layman explanations
    const patterns = [
      {
        keywords: ['sql', 'injection', 'database'],
        whatItMeans: 'Hackers can trick your application into giving them access to your database by sending malicious code through input fields.',
        whyItMatters: 'This could expose sensitive information like passwords, credit cards, or private user data.',
        whatToDo: 'Validate and clean all user inputs before using them in database queries. Use prepared statements.',
        icon: 'bi-database-fill-exclamation'
      },
      {
        keywords: ['xss', 'cross-site', 'scripting'],
        whatItMeans: 'Attackers can inject malicious code into your website that runs when other users visit it.',
        whyItMatters: 'This can steal user information, hijack accounts, or spread malware to your visitors.',
        whatToDo: 'Escape and sanitize all user-generated content before displaying it on your website.',
        icon: 'bi-code-slash'
      },
      {
        keywords: ['csrf', 'cross-site request forgery'],
        whatItMeans: 'Hackers can trick users into performing actions on your site without knowing it.',
        whyItMatters: 'Users might unknowingly change passwords, make purchases, or transfer data.',
        whatToDo: 'Use CSRF tokens to verify that requests are intentional and from legitimate users.',
        icon: 'bi-shield-slash'
      },
      {
        keywords: ['authentication', 'login', 'password', 'credential'],
        whatItMeans: 'Your login system has weaknesses that could let unauthorized people access accounts.',
        whyItMatters: 'Attackers could break into user accounts, steal data, or impersonate legitimate users.',
        whatToDo: 'Enforce strong passwords, add multi-factor authentication, and limit login attempts.',
        icon: 'bi-key-fill'
      },
      {
        keywords: ['encryption', 'ssl', 'tls', 'certificate'],
        whatItMeans: 'Data traveling between users and your server is not properly protected.',
        whyItMatters: 'Sensitive information like passwords or payment details could be intercepted and read.',
        whatToDo: 'Use HTTPS with a valid SSL certificate to encrypt all data in transit.',
        icon: 'bi-lock-fill'
      },
      {
        keywords: ['port', 'open', 'exposed', 'service'],
        whatItMeans: 'Your server has unnecessary open doors (ports) that hackers could use to break in.',
        whyItMatters: 'Each open port is a potential entry point for attackers to exploit vulnerabilities.',
        whatToDo: 'Close all unused ports and secure necessary ones with firewalls and access controls.',
        icon: 'bi-door-open-fill'
      },
      {
        keywords: ['dependency', 'outdated', 'version', 'library', 'package'],
        whatItMeans: 'Your application uses old, vulnerable versions of third-party software.',
        whyItMatters: 'Known security flaws in these components can be easily exploited by attackers.',
        whatToDo: 'Update all dependencies to the latest secure versions and regularly monitor for updates.',
        icon: 'bi-box-seam'
      },
      {
        keywords: ['configuration', 'misconfiguration', 'default'],
        whatItMeans: 'Your system settings are not secure or use default values that everyone knows.',
        whyItMatters: 'Attackers can exploit these known weak settings to gain unauthorized access.',
        whatToDo: 'Review and harden all configurations, change default passwords, and follow security best practices.',
        icon: 'bi-gear-fill'
      },
      {
        keywords: ['secret', 'api key', 'token', 'credential', 'hardcoded'],
        whatItMeans: 'Sensitive passwords or keys are exposed in your code or configuration files.',
        whyItMatters: 'Anyone with access to your code could steal these credentials and impersonate your service.',
        whatToDo: 'Use environment variables or secure vaults to store secrets, never commit them to code.',
        icon: 'bi-key'
      },
      {
        keywords: ['privilege', 'permission', 'authorization', 'access control'],
        whatItMeans: 'Users or processes have more permissions than they need to do their jobs.',
        whyItMatters: 'If an account is compromised, attackers get access to more resources than necessary.',
        whatToDo: 'Apply principle of least privilege: give users only the minimum permissions they need.',
        icon: 'bi-person-lock'
      }
    ];

    // Find matching pattern
    const match = patterns.find(pattern => 
      pattern.keywords.some(keyword => 
        title.includes(keyword) || description.includes(keyword)
      )
    );

    if (match) {
      return { ...match, severity };
    }

    // Default generic explanation
    return {
      whatItMeans: 'A security weakness was found in your system that could be exploited by attackers.',
      whyItMatters: `This is a ${severity.toLowerCase()} priority issue that could impact your security.`,
      whatToDo: 'Review the technical details and apply the recommended fix as soon as possible.',
      icon: 'bi-exclamation-triangle-fill',
      severity
    };
  };

  const getSeverityColor = (severity) => {
    const colors = {
      Critical: '#ff0844',
      High: '#ff7800',
      Medium: '#ffc107',
      Low: '#06ffa5'
    };
    return colors[severity] || '#8892a6';
  };

  const getSeverityIcon = (severity) => {
    const icons = {
      Critical: 'bi-exclamation-octagon-fill',
      High: 'bi-exclamation-triangle-fill',
      Medium: 'bi-exclamation-circle-fill',
      Low: 'bi-info-circle-fill'
    };
    return icons[severity] || 'bi-info-circle-fill';
  };

  const toggleExpand = (index) => {
    setExpandedVuln(expandedVuln === index ? null : index);
  };

  return (
    <div className="vulnerability-explainer">
      <div className="explainer-header">
        <i className="bi bi-lightbulb-fill"></i>
        <h3>Simplified Security Insights</h3>
        <span className="explainer-badge">Plain Language</span>
      </div>

      {vulnerabilities.length === 0 ? (
        <div className="explainer-empty">
          <i className="bi bi-shield-check empty-icon"></i>
          <h4>No Vulnerabilities Found</h4>
          <p>Your recent scans haven't detected any security issues. Keep scanning regularly!</p>
        </div>
      ) : (
        <div className="explainer-content">
          <div className="explainer-intro">
            <p>
              <i className="bi bi-info-circle"></i>
              <strong>What you need to know:</strong> We found {vulnerabilities.length} security {vulnerabilities.length === 1 ? 'issue' : 'issues'} during our scans. 
              Click each card below to understand what it means and how to fix it.
            </p>
          </div>

          <div className="vulnerability-cards">
            {vulnerabilities.map((vuln, index) => {
              const explanation = getExplanation(vuln);
              const isExpanded = expandedVuln === index;
              const color = getSeverityColor(vuln.severity);

              return (
                <div 
                  key={index} 
                  className={`vuln-card ${isExpanded ? 'expanded' : ''}`}
                  style={{ borderLeftColor: color }}
                  onClick={() => toggleExpand(index)}
                >
                  <div className="vuln-card-header">
                    <div className="vuln-icon-wrapper">
                      <i className={`${explanation.icon} vuln-type-icon`} style={{ color }}></i>
                    </div>
                    <div className="vuln-title-section">
                      <h4>{vuln.title || 'Security Issue'}</h4>
                      <span className="vuln-severity" style={{ backgroundColor: `${color}20`, color }}>
                        <i className={getSeverityIcon(vuln.severity)}></i>
                        {vuln.severity} Risk
                      </span>
                    </div>
                    <i className={`bi bi-chevron-${isExpanded ? 'up' : 'down'} expand-icon`}></i>
                  </div>

                  {isExpanded && (
                    <div className="vuln-card-body">
                      <div className="explanation-section">
                        <div className="explanation-item">
                          <div className="explanation-label">
                            <i className="bi bi-question-circle-fill"></i>
                            What This Means
                          </div>
                          <p>{explanation.whatItMeans}</p>
                        </div>

                        <div className="explanation-item">
                          <div className="explanation-label">
                            <i className="bi bi-exclamation-diamond-fill"></i>
                            Why It Matters
                          </div>
                          <p>{explanation.whyItMatters}</p>
                        </div>

                        <div className="explanation-item">
                          <div className="explanation-label">
                            <i className="bi bi-tools"></i>
                            What To Do
                          </div>
                          <p>{explanation.whatToDo}</p>
                        </div>
                      </div>

                      {vuln.description && (
                        <div className="technical-details">
                          <div className="details-toggle">
                            <i className="bi bi-code-square"></i>
                            Technical Details
                          </div>
                          <p className="technical-text">{vuln.description}</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityExplainer;

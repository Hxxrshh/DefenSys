version: '3.8'

services:
  db:
    image: postgres:13
    container_name: defensys_db
    environment:
      - POSTGRES_USER=defensys_user
      - POSTGRES_PASSWORD=defensys_password
      - POSTGRES_DB=defensys_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - defensys_net

  redis:
    image: redis:6-alpine
    container_name: defensys_redis
    ports:
      - "6379:6379"
    networks:
      - defensys_net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: defensys_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=defensys_user
      - RABBITMQ_DEFAULT_PASS=defensys_password
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - defensys_net

  api:
    build: ./backend
    container_name: defensys_api
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - DATABASE_URL=postgresql://defensys_user:defensys_password@db:5432/defensys_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://defensys_user:defensys_password@rabbitmq:5672
    volumes:
      - ./scan_results:/app/scan_results
      - /var/run/docker.sock:/var/run/docker.sock  # For container scanning
    networks:
      - defensys_net

  sonarqube:
    image: sonarqube:latest
    container_name: defensys_sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/defensys_db
      - SONAR_JDBC_USERNAME=defensys_user
      - SONAR_JDBC_PASSWORD=defensys_password
    depends_on:
      - db
    networks:
      - defensys_net

  # Container security scanner
  trivy-server:
    image: aquasec/trivy:latest
    container_name: defensys_trivy
    command: ["server", "--listen", "0.0.0.0:4954"]
    ports:
      - "4954:4954"
    networks:
      - defensys_net

  # Web interface for scan results
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: defensys_frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - defensys_net

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  defensys_net:
    driver: bridge

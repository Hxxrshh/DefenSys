pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        IMAGE_NAME = 'defensys'
        VERSION = "${BUILD_NUMBER}"
        KUBECONFIG = credentials('kubernetes-config')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Backend') {
            steps {
                script {
                    dir('backend/VulnAlert') {
                        sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:${VERSION} .'
                        sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:latest .'
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend/vulnwatch-dash') {
                        sh '''
                            npm ci
                            npm run build
                            docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:${VERSION} .
                            docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:latest .
                        '''
                    }
                }
            }
        }
        
        stage('Build Scanners') {
            parallel {
                stage('SAST Scanner') {
                    steps {
                        script {
                            dir('backend/scanners/sast') {
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-sast:${VERSION} .'
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-sast:latest .'
                            }
                        }
                    }
                }
                stage('Secret Scanner') {
                    steps {
                        script {
                            dir('backend/scanners/secrets') {
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-secrets:${VERSION} .'
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-secrets:latest .'
                            }
                        }
                    }
                }
                stage('Dependency Scanner') {
                    steps {
                        script {
                            dir('backend/scanners/dependencies') {
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-deps:${VERSION} .'
                                sh 'docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}-deps:latest .'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Container Security Scan') {
                    steps {
                        script {
                            sh '''
                                # Trivy container scanning
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    aquasec/trivy image ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:${VERSION}
                                
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    aquasec/trivy image ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:${VERSION}
                            '''
                        }
                    }
                }
                stage('Code Security Scan') {
                    steps {
                        script {
                            sh '''
                                # CodeQL or other SAST tools
                                echo "Running SAST on DefenSys itself..."
                                
                                # Bandit for Python
                                bandit -r backend/ -f json -o bandit-report.json || true
                                
                                # ESLint security for frontend
                                cd frontend/vulnwatch-dash
                                npm run lint -- --format json > eslint-report.json || true
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        script {
                            dir('backend/VulnAlert') {
                                sh '''
                                    python -m pytest tests/ --junitxml=test-results.xml
                                    coverage run -m pytest tests/
                                    coverage xml
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            junit 'backend/VulnAlert/test-results.xml'
                            publishCoverage adapters: [coberturaAdapter('backend/VulnAlert/coverage.xml')]
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        script {
                            dir('frontend/vulnwatch-dash') {
                                sh '''
                                    npm test -- --coverage --watchAll=false
                                '''
                            }
                        }
                    }
                }
                stage('Integration Tests') {
                    steps {
                        script {
                            sh '''
                                # Start services for integration testing
                                docker-compose -f docker-compose.test.yml up -d
                                
                                # Wait for services to be ready
                                sleep 30
                                
                                # Run integration tests
                                python -m pytest integration_tests/ --junitxml=integration-results.xml
                                
                                # Cleanup
                                docker-compose -f docker-compose.test.yml down
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'integration-results.xml'
                        }
                    }
                }
            }
        }
        
        stage('Push Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login $DOCKER_REGISTRY -u $DOCKER_USER --password-stdin
                            
                            # Push all images
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:${VERSION}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:latest
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:${VERSION}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:latest
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-sast:${VERSION}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-sast:latest
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-secrets:${VERSION}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-secrets:latest
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-deps:${VERSION}
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}-deps:latest
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh '''
                        # Update Kubernetes manifests
                        sed -i "s|image: .*defensys-api:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:${VERSION}|g" k8s/staging/api-deployment.yaml
                        sed -i "s|image: .*defensys-frontend:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:${VERSION}|g" k8s/staging/frontend-deployment.yaml
                        
                        # Apply to staging namespace
                        kubectl apply -f k8s/staging/ -n defensys-staging
                        
                        # Wait for rollout
                        kubectl rollout status deployment/defensys-api -n defensys-staging
                        kubectl rollout status deployment/defensys-frontend -n defensys-staging
                    '''
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    input message: 'Deploy to Production?', ok: 'Deploy'
                    
                    sh '''
                        # Update production manifests
                        sed -i "s|image: .*defensys-api:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}-api:${VERSION}|g" k8s/production/api-deployment.yaml
                        sed -i "s|image: .*defensys-frontend:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}-frontend:${VERSION}|g" k8s/production/frontend-deployment.yaml
                        
                        # Apply to production namespace
                        kubectl apply -f k8s/production/ -n defensys-prod
                        
                        # Wait for rollout
                        kubectl rollout status deployment/defensys-api -n defensys-prod
                        kubectl rollout status deployment/defensys-frontend -n defensys-prod
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Clean up
            sh '''
                docker system prune -f
                docker image prune -f
            '''
            
            // Archive artifacts
            archiveArtifacts artifacts: '**/*-report.json', allowEmptyArchive: true
            
            // Publish test results
            publishTestResults testResultsPattern: '**/*-results.xml'
        }
        
        success {
            slackSend(
                channel: '#defensys-alerts',
                color: 'good',
                message: ":white_check_mark: DefenSys Build ${BUILD_NUMBER} succeeded! :rocket:"
            )
        }
        
        failure {
            slackSend(
                channel: '#defensys-alerts',
                color: 'danger',
                message: ":x: DefenSys Build ${BUILD_NUMBER} failed! :rotating_light:"
            )
        }
    }
}
